{"version":3,"sources":["classes/BoardCell.js","classes/BoardPiece.js","components/Board/Board.jsx","components/GameGenerator/GameGenerator.jsx","App.js","serviceWorker.js","index.js"],"names":["BoardCell","row","col","piece","this","BoardPiece","player","isKing","Board","props","board","i","push","j","state","targets","pieceToMove","isMyTurn","inJumpChain","socket","io","on","setState","cell","movePiece","emit","location","pathname","newBoard","createBoardFromObject","error","console","log","forEach","r","c","getMoveTargets","res","getPossibleTargets","adj","hasPiece","jumpTarget","canJumpOver","canMoveTo","pieceToJump","includes","endTurn","isJump","Math","abs","jumpRow","jumpCol","target","length","dir","className","map","rowId","key","colId","canHavePiece","onClick","handleCellClick","showMoveTargets","icon","chessQueen","React","Component","GameGenerator","gameURL","url","random","toString","substring","window","open","createGame","App","basename","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b288d1f7.chunk.js","sourcesContent":["export default class BoardCell {\r\n    constructor(row, col, piece = null) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.piece = piece;\r\n    }\r\n\r\n    canHavePiece() {\r\n        return (this.row + this.col) % 2 === 1;\r\n    }\r\n\r\n    hasPiece() {\r\n        return this.piece !== null;\r\n    }\r\n}","export default class BoardPiece {\r\n    constructor(player, row, col, isKing = false) {\r\n        this.player = player;\r\n        this.row = row;\r\n        this.col = col;\r\n        this.isKing = isKing;\r\n    }\r\n}","import React from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nimport BoardCell from '../../classes/BoardCell';\r\nimport BoardPiece from '../../classes/BoardPiece';\r\n\r\nimport { Icon } from '@iconify/react';\r\nimport chessQueen from '@iconify/icons-mdi/chess-queen';\r\nimport './Board.scss';\r\n\r\n\r\n\r\n//TODO: \r\n// Add logic for ending turn in jump chain\r\n// Add visuals to display whose turn it is\r\n// Winning/tie conditions\r\n\r\nexport default class Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let board = [];\r\n        for (let i = 0; i < 8; i++) {\r\n            board.push([]);\r\n            for (let j = 0; j < 8; j++) {\r\n                if ((i + j) % 2 === 1) {\r\n                    if (i < 3) {\r\n                        board[i].push(new BoardCell(i, j, new BoardPiece(2, i, j)));\r\n                    } else if (i >= 5) {\r\n                        board[i].push(new BoardCell(i, j, new BoardPiece(1, i, j)));\r\n                    } else {\r\n                        board[i].push(new BoardCell(i, j));\r\n                    }\r\n                } else {\r\n                    board[i].push(new BoardCell(i, j));\r\n                }\r\n            }\r\n        }\r\n        this.state = {\r\n            board: board,\r\n            targets: [],\r\n            pieceToMove: null,\r\n            player: null,\r\n            isMyTurn: false,\r\n            inJumpChain: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const ENDPOINT = 'https://simple-checkers.herokuapp.com/';\r\n        this.socket = io(ENDPOINT);\r\n        \r\n        this.socket.on('player-number', (player) => {\r\n            this.setState({\r\n                player: player\r\n            });\r\n        });\r\n        this.socket.on('move', (cell, piece) => {\r\n            this.movePiece(piece, cell);\r\n        });\r\n\r\n        this.socket.on('endturn', () => {\r\n            this.setState({\r\n                isMyTurn: true\r\n            });\r\n        });\r\n        this.socket.on('connection', () => {\r\n            this.socket.emit('join-room', this.props.location.pathname);\r\n        });\r\n        this.socket.on('boardConfig', (board) => {\r\n            let newBoard = this.createBoardFromObject(board);\r\n            this.setState({\r\n                board: newBoard\r\n            });\r\n        });\r\n        this.socket.on('err', (error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    // Creates a new board from the object passed in from the server\r\n    createBoardFromObject(board) {\r\n        board.forEach((row, r) => {\r\n            row.forEach((cell, c) => {\r\n                let piece = board[r][c].piece;\r\n                if (piece !== null) {\r\n                    piece = new BoardPiece(piece.player, piece.row, piece.col, piece.isKing);\r\n                }\r\n                board[r][c] = new BoardCell(r, c, piece);\r\n            });\r\n        });\r\n        return board;\r\n    }\r\n\r\n    showMoveTargets(piece) {\r\n        if (this.state.isMyTurn && !this.state.inJumpChain && piece.player === this.state.player) {\r\n            this.setState({\r\n                targets: this.getMoveTargets(piece.row, piece.col),\r\n                pieceToMove: piece\r\n            });  \r\n        }\r\n    }\r\n\r\n    // Returns an array of cells\r\n    getMoveTargets(row, col) {\r\n        const board = this.state.board;\r\n        const piece = board[row][col].piece;\r\n\r\n        let res = [];\r\n\r\n        this.getPossibleTargets(piece).forEach(adj => {\r\n            if (adj.hasPiece()) {\r\n                const jumpTarget = this.canJumpOver(piece, adj.piece);\r\n                if (jumpTarget !== null) {\r\n                    res.push(jumpTarget);\r\n                }\r\n            } else {\r\n                if (this.canMoveTo(piece, adj)) {\r\n                    res.push(adj);\r\n                }\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n\r\n    canMoveTo(piece, cell) {\r\n        if (!piece.isKing) {\r\n            // Player 1 cannot move down\r\n            // Player 2 cannot move up\r\n            if ((piece.player === 1 && cell.row > piece.row) || (piece.player === 2 && cell.row < piece.row)) {\r\n                return false;\r\n            }\r\n        }\r\n        if (!cell.hasPiece()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the target cell if the pieceToJump can be jumped, otherwise returns false.\r\n     *\r\n     * @param BoardPiece pieceToMove\r\n     * @param BoardPiece pieceToJump\r\n     */\r\n    canJumpOver(pieceToMove, pieceToJump) {\r\n        if (pieceToMove.player === pieceToJump.player) {\r\n            return false;\r\n        }\r\n        const board = this.state.board;\r\n        const row = 2 * (pieceToJump.row - pieceToMove.row) + pieceToMove.row;\r\n        const col = 2 * (pieceToJump.col - pieceToMove.col) + pieceToMove.col;\r\n\r\n        if (row >= 0 && col >= 0 && row < 8 && col < 8 && !board[row][col].hasPiece()) {\r\n            return board[row][col];\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    handleCellClick(cell) {\r\n        if (!this.state.targets.includes(cell)) {\r\n            return;\r\n        }\r\n        this.socket.emit('move', cell, this.state.pieceToMove);\r\n        if (!this.movePiece(this.state.pieceToMove, cell)) {\r\n            this.endTurn();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Moves a piece on the board.\r\n     *\r\n     * @param BoardPiece piece\r\n     * @param BoardCell cell\r\n     *\r\n     */\r\n    movePiece(piece, cell) {\r\n        let board = this.state.board;\r\n        let isJump = false;\r\n\r\n        // Handle the case where we are jumping a piece\r\n        if (Math.abs(piece.row - cell.row) === 2) {\r\n            const jumpRow = (piece.row + cell.row) / 2;\r\n            const jumpCol = (piece.col + cell.col) / 2;\r\n            board[jumpRow][jumpCol].piece = null;\r\n            isJump = true;\r\n        }\r\n\r\n        board[piece.row][piece.col].piece = null;\r\n        piece.row = cell.row;\r\n        piece.col = cell.col;\r\n        if (!piece.isKing && (piece.row === 0 || piece.row === 7)) {\r\n            piece.isKing = true;\r\n        }\r\n        board[cell.row][cell.col].piece = piece;\r\n        this.setState({\r\n            targets: [],\r\n            pieceToMove: null,\r\n            board: board,\r\n            inJumpChain: false\r\n        });\r\n\r\n        this.socket.emit('boardConfig', board);\r\n\r\n        if (isJump) {\r\n            //Check if another piece can be jumped\r\n            let targets = [];\r\n            this.getPossibleTargets(piece).forEach(adj => {\r\n                if (adj.hasPiece()) {\r\n                    let target = this.canJumpOver(piece, adj.piece);\r\n                    if (target) {\r\n                        targets.push(target);\r\n                    }\r\n                }\r\n            });\r\n            if (targets.length > 0) {\r\n                this.setState({\r\n                    inJumpChain: true,\r\n                    pieceToMove: piece,\r\n                    targets: targets\r\n                });\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    endTurn() {\r\n        this.socket.emit('endturn');\r\n        this.setState({\r\n            isMyTurn: false\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns an array of diagnolly adjacent cells.\r\n     *\r\n     * @param BoardPiece piece\r\n     */\r\n    getPossibleTargets(piece) {\r\n        let adj = [];\r\n        const directions = [\r\n            [1, 1],\r\n            [-1, 1],\r\n            [1, -1],\r\n            [-1, -1]\r\n        ];\r\n\r\n        directions.forEach(dir => {\r\n            // For non-king pieces: player 1 cannot move down, and player 2 cannot move up\r\n            if (!piece.isKing && ((piece.player === 1 && dir[0] === 1) || (piece.player === 2 && dir[0] === -1))) {\r\n                return;\r\n            }\r\n            const row = piece.row + dir[0];\r\n            const col = piece.col + dir[1];\r\n            if (row >= 0 && col >= 0 && row < 8 && col < 8) {\r\n                adj.push(this.state.board[row][col]);\r\n            }\r\n        });\r\n\r\n        return adj;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='board'>\r\n                {this.state.board.map((row, rowId) => (\r\n                    <div className='row' key={rowId}>\r\n                        {row.map((cell, colId) => (\r\n                            <div\r\n                                className={`cell ${cell.canHavePiece() ? 'moveable' : ''}`}\r\n                                key={colId}\r\n                                onClick={() => this.handleCellClick(cell)}\r\n                            >\r\n                                {cell.hasPiece() && (\r\n                                    <div\r\n                                        className={`piece player${cell.piece.player}`}\r\n                                        onClick={() => this.showMoveTargets(cell.piece, rowId, colId)}\r\n                                    >\r\n                                        {cell.piece.isKing && <Icon icon={chessQueen} className='king' />}\r\n                                    </div>\r\n                                )}\r\n                                {this.state.targets.includes(cell) && <div className='target-marker'></div>}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport \"./GameGenerator.scss\";\r\n\r\n\r\nexport default class GameGenerator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            gameURL: null\r\n        };\r\n    }\r\n\r\n    createGame() {\r\n        const url = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n\r\n        this.setState({\r\n            gameURL: url\r\n        });\r\n\r\n        window.open(\"/game/\" + url, \"_blank\");\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"gameGenerator\">\r\n                <button onClick={() => this.createGame()}>Create Game</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\n\nimport Board from './components/Board/Board';\nimport GameGenerator from './components/GameGenerator/GameGenerator';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nconst App = () => {\n    return (\n        <Router basename=\"/checkers\">\n            <Route path='/' exact component={GameGenerator} />\n            <Route path='/game/:id' exact component={Board} />\n        </Router>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}