{"version":3,"sources":["classes/BoardCell.js","classes/BoardPiece.js","components/InvitePlayer/InvitePlayer.jsx","components/Board/Board.jsx","components/GameGenerator/GameGenerator.jsx","App.js","serviceWorker.js","index.js"],"names":["BoardCell","row","col","piece","this","BoardPiece","player","isKing","InvitePlayer","document","getElementById","select","execCommand","className","Modal","centered","show","Header","Title","Body","InputGroup","FormControl","id","value","process","REACT_APP_BASE_URL","props","location","pathname","readOnly","Append","onClick","copyToClipboard","Text","Footer","PropTypes","any","React","Component","withRouter","Board","board","i","push","j","state","targets","pieceToMove","isMyTurn","inJumpChain","hasBothPlayers","ENDPOINT","REACT_APP_API_ENDPOINT","console","log","socket","io","on","setState","val","cell","movePiece","emit","newBoard","createBoardFromObject","error","forEach","r","c","getMoveTargets","res","getPossibleTargets","adj","hasPiece","jumpTarget","canJumpOver","canMoveTo","pieceToJump","includes","endTurn","isJump","Math","abs","jumpRow","jumpCol","target","length","dir","map","rowId","key","colId","canHavePiece","handleCellClick","showMoveTargets","icon","chessQueen","GameGenerator","gameURL","url","random","toString","substring","window","open","href","Button","createGame","App","basename","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.17818bea.chunk.js","sourcesContent":["export default class BoardCell {\n    constructor(row, col, piece = null) {\n        this.row = row;\n        this.col = col;\n        this.piece = piece;\n    }\n\n    canHavePiece() {\n        return (this.row + this.col) % 2 === 1;\n    }\n\n    hasPiece() {\n        return this.piece !== null;\n    }\n}","export default class BoardPiece {\n    constructor(player, row, col, isKing = false) {\n        this.player = player;\n        this.row = row;\n        this.col = col;\n        this.isKing = isKing;\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './InvitePlayer.scss';\nimport Modal from 'react-bootstrap/Modal';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport { withRouter } from 'react-router-dom';\n\nclass InvitePlayer extends React.Component {\n    static get propTypes() {\n        return {\n            location: PropTypes.any\n        };\n    }\n\n    componentDidMount() {\n        // Highlight the text box\n        document.getElementById('url').select();\n    }\n\n    copyToClipboard() {\n        document.getElementById('url').select();\n        document.execCommand('copy');\n    }\n\n    render() {\n        return (\n            <div className='invitePlayer'>\n                <Modal centered show={true}>\n                    <Modal.Header>\n                        <Modal.Title>Invite a friend!</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <InputGroup>\n                            <FormControl\n                                id=\"url\"\n                                value={process.env.REACT_APP_BASE_URL + this.props.location.pathname}\n                                readOnly\n                            />\n                            <InputGroup.Append id=\"copy-btn\" onClick={this.copyToClipboard}>\n                                <InputGroup.Text>Copy</InputGroup.Text>\n                            </InputGroup.Append>\n                        </InputGroup>\n                    </Modal.Body>\n                    <Modal.Footer id=\"modal-footer\">\n                        <p>The game will start once another player has joined.</p>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(InvitePlayer);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport io from 'socket.io-client';\n\nimport BoardCell from '../../classes/BoardCell';\nimport BoardPiece from '../../classes/BoardPiece';\nimport InvitePlayer from \"../InvitePlayer/InvitePlayer\";\n\nimport { Icon } from '@iconify/react';\nimport chessQueen from '@iconify/icons-mdi/chess-queen';\nimport './Board.scss';\n\n\n\n//TODO: \n// Add logic for ending turn in jump chain\n// Add visuals to display whose turn it is\n// Winning/tie conditions\n// Add error handling for if a user joins a game that is full\n// Add dragging for pieces\n// Make API secure\n\nexport default class Board extends React.Component {\n    static get propTypes() {\n        return {\n            location: PropTypes.any\n        };\n    }\n    constructor(props) {\n        super(props);\n\n        let board = [];\n        for (let i = 0; i < 8; i++) {\n            board.push([]);\n            for (let j = 0; j < 8; j++) {\n                if ((i + j) % 2 === 1) {\n                    if (i < 3) {\n                        board[i].push(new BoardCell(i, j, new BoardPiece(2, i, j)));\n                    } else if (i >= 5) {\n                        board[i].push(new BoardCell(i, j, new BoardPiece(1, i, j)));\n                    } else {\n                        board[i].push(new BoardCell(i, j));\n                    }\n                } else {\n                    board[i].push(new BoardCell(i, j));\n                }\n            }\n        }\n        this.state = {\n            board: board,\n            targets: [],\n            pieceToMove: null,\n            player: null,\n            isMyTurn: false,\n            inJumpChain: false,\n            hasBothPlayers: false\n        };\n    }\n\n    componentDidMount() {\n        const ENDPOINT = process.env.REACT_APP_API_ENDPOINT;\n        console.log(ENDPOINT);\n        this.socket = io(ENDPOINT);\n        \n        this.socket.on('player-number', (player) => {\n            this.setState({\n                player: player\n            });\n        });\n        this.socket.on('has-both-players', (val) => {\n            console.log(val);\n            this.setState({hasBothPlayers: val});\n        });\n        this.socket.on('move', (cell, piece) => {\n            this.movePiece(piece, cell);\n        });\n\n        this.socket.on('endturn', () => {\n            this.setState({\n                isMyTurn: true\n            });\n        });\n        this.socket.on('connection', () => {\n            this.socket.emit('join-room', this.props.location.pathname);\n        });\n        this.socket.on('boardConfig', (board) => {\n            let newBoard = this.createBoardFromObject(board);\n            this.setState({\n                board: newBoard\n            });\n        });\n        this.socket.on('err', (error) => {\n            console.log(error);\n        });\n    }\n\n    // Creates a new board from the object passed in from the server\n    createBoardFromObject(board) {\n        board.forEach((row, r) => {\n            row.forEach((cell, c) => {\n                let piece = board[r][c].piece;\n                if (piece !== null) {\n                    piece = new BoardPiece(piece.player, piece.row, piece.col, piece.isKing);\n                }\n                board[r][c] = new BoardCell(r, c, piece);\n            });\n        });\n        return board;\n    }\n\n    showMoveTargets(piece) {\n        if (this.state.isMyTurn && !this.state.inJumpChain && piece.player === this.state.player) {\n            this.setState({\n                targets: this.getMoveTargets(piece.row, piece.col),\n                pieceToMove: piece\n            });  \n        }\n    }\n\n    // Returns an array of cells\n    getMoveTargets(row, col) {\n        const board = this.state.board;\n        const piece = board[row][col].piece;\n\n        let res = [];\n\n        this.getPossibleTargets(piece).forEach(adj => {\n            if (adj.hasPiece()) {\n                const jumpTarget = this.canJumpOver(piece, adj.piece);\n                if (jumpTarget !== null) {\n                    res.push(jumpTarget);\n                }\n            } else {\n                if (this.canMoveTo(piece, adj)) {\n                    res.push(adj);\n                }\n            }\n        });\n        return res;\n    }\n\n    canMoveTo(piece, cell) {\n        if (!piece.isKing) {\n            // Player 1 cannot move down\n            // Player 2 cannot move up\n            if ((piece.player === 1 && cell.row > piece.row) || (piece.player === 2 && cell.row < piece.row)) {\n                return false;\n            }\n        }\n        if (!cell.hasPiece()) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns the target cell if the pieceToJump can be jumped, otherwise returns false.\n     *\n     * @param BoardPiece pieceToMove\n     * @param BoardPiece pieceToJump\n     */\n    canJumpOver(pieceToMove, pieceToJump) {\n        if (pieceToMove.player === pieceToJump.player) {\n            return false;\n        }\n        const board = this.state.board;\n        const row = 2 * (pieceToJump.row - pieceToMove.row) + pieceToMove.row;\n        const col = 2 * (pieceToJump.col - pieceToMove.col) + pieceToMove.col;\n\n        if (row >= 0 && col >= 0 && row < 8 && col < 8 && !board[row][col].hasPiece()) {\n            return board[row][col];\n        }\n\n        return false;\n    }\n\n    handleCellClick(cell) {\n        if (!this.state.targets.includes(cell)) {\n            return;\n        }\n        this.socket.emit('move', cell, this.state.pieceToMove);\n        if (!this.movePiece(this.state.pieceToMove, cell)) {\n            this.endTurn();\n        }\n    }\n\n    /**\n     * Moves a piece on the board.\n     *\n     * @param BoardPiece piece\n     * @param BoardCell cell\n     *\n     */\n    movePiece(piece, cell) {\n        let board = this.state.board;\n        let isJump = false;\n\n        // Handle the case where we are jumping a piece\n        if (Math.abs(piece.row - cell.row) === 2) {\n            const jumpRow = (piece.row + cell.row) / 2;\n            const jumpCol = (piece.col + cell.col) / 2;\n            board[jumpRow][jumpCol].piece = null;\n            if (piece.player === this.state.player) {\n                isJump = true;\n            }\n        }\n\n        board[piece.row][piece.col].piece = null;\n        piece.row = cell.row;\n        piece.col = cell.col;\n        if (!piece.isKing && (piece.row === 0 || piece.row === 7)) {\n            piece.isKing = true;\n        }\n        board[cell.row][cell.col].piece = piece;\n        this.setState({\n            targets: [],\n            pieceToMove: null,\n            board: board,\n            inJumpChain: false\n        });\n\n        this.socket.emit('boardConfig', board);\n\n        if (isJump) {\n            //Check if another piece can be jumped\n            let targets = [];\n            this.getPossibleTargets(piece).forEach(adj => {\n                if (adj.hasPiece()) {\n                    let target = this.canJumpOver(piece, adj.piece);\n                    if (target) {\n                        targets.push(target);\n                    }\n                }\n            });\n            if (targets.length > 0) {\n                this.setState({\n                    inJumpChain: true,\n                    pieceToMove: piece,\n                    targets: targets\n                });\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    endTurn() {\n        this.socket.emit('endturn');\n        this.setState({\n            isMyTurn: false\n        });\n    }\n\n    /**\n     * Returns an array of diagnolly adjacent cells.\n     *\n     * @param BoardPiece piece\n     */\n    getPossibleTargets(piece) {\n        let adj = [];\n        const directions = [\n            [1, 1],\n            [-1, 1],\n            [1, -1],\n            [-1, -1]\n        ];\n\n        directions.forEach(dir => {\n            // For non-king pieces: player 1 cannot move down, and player 2 cannot move up\n            if (!piece.isKing && ((piece.player === 1 && dir[0] === 1) || (piece.player === 2 && dir[0] === -1))) {\n                return;\n            }\n            const row = piece.row + dir[0];\n            const col = piece.col + dir[1];\n            if (row >= 0 && col >= 0 && row < 8 && col < 8) {\n                adj.push(this.state.board[row][col]);\n            }\n        });\n\n        return adj;\n    }\n\n    render() {\n        return (\n            <div className='board'>\n                {!this.state.hasBothPlayers && <InvitePlayer />} \n                {this.state.board.map((row, rowId) => (\n                    <div className='row' key={rowId}>\n                        {row.map((cell, colId) => (\n                            <div\n                                className={`cell ${cell.canHavePiece() ? 'moveable' : ''}`}\n                                key={colId}\n                                onClick={() => this.handleCellClick(cell)}\n                            >\n                                {cell.hasPiece() && (\n                                    <div\n                                        className={`piece player${cell.piece.player}`}\n                                        onClick={() => this.showMoveTargets(cell.piece, rowId, colId)}\n                                    >\n                                        {cell.piece.isKing && <Icon icon={chessQueen} className='king' />}\n                                    </div>\n                                )}\n                                {this.state.targets.includes(cell) && <div className='target-marker'></div>}\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport \"./GameGenerator.scss\";\n\n\nexport default class GameGenerator extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            gameURL: null\n        };\n    }\n\n    createGame() {\n        const url = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n\n        this.setState({\n            gameURL: url\n        });\n\n        window.open(window.location.href + \"game/\" + url, \"_self\");\n    }\n\n\n    render() {\n        return (\n            <div className=\"gameGenerator\">\n                <Button onClick={() => this.createGame()}>Click to start a game!</Button> \n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport Board from './components/Board/Board';\nimport GameGenerator from './components/GameGenerator/GameGenerator';\nimport InvitePlayer from './components/InvitePlayer/InvitePlayer';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport './App.scss';\n\nconst App = () => {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <Route path='/' exact component={GameGenerator} />\n            <Route path='/game/:id' exact component={Board} />\n            <Route path='/test' exact component={InvitePlayer} />\n            \n        </Router>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}